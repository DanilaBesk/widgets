import { useState, useEffect } from "react";
import axios from "axios";

interface WeatherCodeMessage {
  [code: number]: string;
}

const WeatherWidget = () => {
  const [weather, setWeather] = useState(0);
  const [temperature, setTemperature] = useState("0");
  const [latitude, setLatitude] = useState(55.75);
  const [longitude, setLongtitude] = useState(37.62);

  const weatherCodeMessage: WeatherCodeMessage = {
    0: "–Ø—Å–Ω–æ ‚òÄÔ∏è",
    1: "–í –æ—Å–Ω–æ–≤–Ω–æ–º —è—Å–Ω–æ üå§Ô∏è",
    2: "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å üå•Ô∏è",
    3: "–ü–∞—Å–º—É—Ä–Ω–æ ‚òÅÔ∏è",
    45: "–¢—É–º–∞–Ω üå´Ô∏è",
    48: "–¢—É–º–∞–Ω (–∏–∑–º–æ—Ä–æ–∑—å) üå´Ô∏è",
    51: "–õ—ë–≥–∫–∞—è –º–æ—Ä–æ—Å—å üå¶Ô∏è",
    53: "–£–º–µ—Ä–µ–Ω–Ω–∞—è –º–æ—Ä–æ—Å—å üå¶Ô∏è",
    55: "–°–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å üå¶Ô∏è",
    56: "–õ—ë–≥–∫–∞—è –ª–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å üåßÔ∏è‚ùÑÔ∏è",
    57: "–°–∏–ª—å–Ω–∞—è –ª–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å üåßÔ∏è‚ùÑÔ∏è",
    61: "–õ—ë–≥–∫–∏–π –¥–æ–∂–¥—å üåßÔ∏è",
    63: "–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å üåßÔ∏è",
    65: "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å üåßÔ∏è",
    66: "–õ—ë–≥–∫–∏–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å üåßÔ∏è‚ùÑÔ∏è",
    67: "–°–∏–ª—å–Ω—ã–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å üåßÔ∏è‚ùÑÔ∏è",
    71: "–õ—ë–≥–∫–∏–π —Å–Ω–µ–≥ üå®Ô∏è",
    73: "–£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–Ω–µ–≥ üå®Ô∏è",
    75: "–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥ üå®Ô∏è",
    77: "–°–Ω–µ–∂–Ω—ã–µ –∑—ë—Ä–Ω–∞ ‚ùÑÔ∏è",
    80: "–õ—ë–≥–∫–∏–π –ª–∏–≤–µ–Ω—å üå¶Ô∏è",
    81: "–£–º–µ—Ä–µ–Ω–Ω—ã–π –ª–∏–≤–µ–Ω—å üå¶Ô∏è",
    82: "–°–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å ‚õàÔ∏è",
    85: "–õ—ë–≥–∫–∏–π —Å–Ω–µ–≥–æ–ø–∞–¥ üå®Ô∏è",
    86: "–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥ üå®Ô∏è",
    95: "–ì—Ä–æ–∑–∞ üå©Ô∏è",
    96: "–ì—Ä–æ–∑–∞ —Å –ª—ë–≥–∫–∏–º –≥—Ä–∞–¥–æ–º ‚õàÔ∏è",
    99: "–ì—Ä–æ–∑–∞ —Å —Å–∏–ª—å–Ω—ã–º –≥—Ä–∞–¥–æ–º ‚õàÔ∏è‚ùÑÔ∏è",
  };

  const currentWeatherMessage: string =
    weatherCodeMessage[weather] || "–ù–µ–∏–∑–≤–µ—Ç–Ω–∞—è –ø–æ–≥–æ–¥–∞";

  useEffect(() => {
    async function getWeather(latitude: number, longitude: number) {
      try {
        const response = await axios.get(
          `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current=temperature_2m,wind_speed_10m,weather_code`
        );
        console.log(response.data.current.temperature_2m);
        setTemperature(`${response.data.current.temperature_2m}¬∞C`);
        setWeather(response.data.current.weather_code);
      } catch (error) {
        setTemperature("-99");
        setWeather(900);
        console.log("–æ—à–∏–±–∫–∞");
      }
    }

    navigator.geolocation.getCurrentPosition((position) => {
      setLatitude(Math.round(position.coords.latitude * 100) / 100);
      setLongtitude(Math.round(position.coords.longitude * 100) / 100);
      console.log(`–ü–æ–ª—É—á–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ${latitude} ${longitude}`);
    });

    getWeather(latitude, longitude);
  }, [weather, temperature, latitude, longitude]);
  return (
    <div>
      <h1>{currentWeatherMessage}</h1>
      <h1>{temperature}</h1>
    </div>
  );
};

export default WeatherWidget;
